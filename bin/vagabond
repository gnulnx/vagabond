#!/usr/bin/env python
import os
import sys
import argparse
import errno
import logging

"""
    This is the vagabond command line utility
"""

# This is the version number
API_VERSION=0.1

# Set up Module Logging
# TODO:  Read this https://docs.python.org/2/howto/logging-cookbook.html
L = logging.getLogger(__name__)
L.setLevel(logging.DEBUG)

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)

L.addHandler(ch)

def getArgs():
    parser = argparse.ArgumentParser(description="Build and Manage a VirtualBox machine using python")
    subparser = parser.add_subparsers(help="Sub processor help", dest="subparser_name")

    # Need to implement these
    init_parser = subparser.add_parser('init', help="Start a Vagabond Project")
    init_parser.add_argument('name', help="The name of the project")
    init_parser.add_argument('-f', '--force', action="store_true", help="Overwrite existing Vagabond.py file")
    init_parser.add_argument('-m', '--media', action="store", help="*.iso, url to *.iso")

    destroy_parser = subparser.add_parser('destroy', help="Destroy the virtual machine")

    halt_parser = subparser.add_parser('halt', help="Halt the virtual machine")
    halt_parser.add_argument('-f', '--force', action="store_true", help="Yank the plug")

    box_parser = subparser.add_parser('box', help="Manage vagabond boxes")
    box_subparser = box_parser.add_subparsers(help="Sub processor help", dest="box_subparser_name")
    
    box_add_parser =  box_subparser.add_parser('add', help="Add a new box")
    box_add_parser.add_argument('-n', '--name', action="store", required=True, help="Name of the box")
    box_add_parser.add_argument('-l', '--loc', action="store", required=True, help="Location of the box")
    #box_add_subparser = box_add_parser.add_subparsers(help="Sub processor help", dest="add_subparser_name")
    #box_add_name_subparser = box_add_subparser.add_parser('name', help="Sub processor help")

    package_parser = subparser.add_parser('package', help="Create a Vagabond package")
    package_parser.add_argument('-o', '--output', action="store", help="Name of the output file")

    # Neither of these are current used       
    up_parser = subparser.add_parser('up', help="Bring the machine up")
    up_parser.add_argument('-f', '--force', action="store_true", help="force create overwriting any previous machines")
    up_parser.add_argument('--hard-force', action="store_true", help="start bu unregistering any vms with the same name")
    
    list_parser = subparser.add_parser('list', help="list options")
    list_parser.add_argument('--ostypes', action="store_true", help="Print a list of valid ostypes and exit")
    return parser.parse_args()

    
def init(args):
    """
        Initialize a project by:
        1)  Create a direction (args.name)
        2)  Use UPDATE_ME template to create initial Vagabond.py file
    """
    # The path to create the Vagabond.py file
    vfile = os.path.join(args.name, "Vagabond.py")
    try:
        os.mkdir(args.name)
    except OSError as e:
        if errno.errorcode[e.errno] == 'EEXIST': #File Exists:  https://docs.python.org/2/library/errno.html
            # Check for Vagabond file to confirm it is a vagabond project
            if os.path.isfile(vfile) and args.force:
                pass
            elif os.path.isfile(vfile) and not args.force:
                L.error("There is already a vagabond project named %s, please choose another name"%args.name)
                L.error("If you would like to force a reinitialize then pass --force")
                sys.exit(0)
            else:
                L.error("There is already a directory named %s"%args.name)
                sys.exit(0)
        else:        
            raise

    # TODO This is for debug only
    args.media="/Users/jfurr/Downloads/ubuntu-14.04.1-server-i386.iso"
 
    # Check to see if --media option was present 
    iso=None
    vdi=None
    vmdx=None
    if args.media:
        iso = args.media if args.media.endswith(".iso") else None
        vdi = args.media if args.media.endswith(".vdi") else None
        vmdx = args.media if args.media.endswith(".vmdx") else None


    # Now we need to use a templating system to copy our initial Vagabond.py file into the project directory 
    from vagabond.templates import VagabondTemplate
    with open(vfile, 'w') as f:
        f.write( VagabondTemplate.render({
            'version':API_VERSION,
            'vmname':args.name,
            'iso':iso,
            'vdi':vdi,
            'vmdx':vmdx,
        }))
        

def readVagabond():
    # Check for Vagabond file in local directory
    vfile = os.path.join(os.getcwd(), "Vagabond.py")
    if not os.path.isfile(vfile):
        raise IOError("You must have a Vagabond file in your current directory")

    # Add current directory to sys path...
    # so that when we load the Vagabond module it loads the users module
    sys.path.insert(0, os.getcwd())
    import Vagabond

    #TODO Need to do a verify/check on the imported Vagabond file.

    return Vagabond

def setup_project():
    """
        Set up the ~/.vagabond directory
    """ 
    vagabond_dirs = os.path.join(
        os.path.expanduser("~"),
        ".vagabond/boxes/",
    )
    try: 
        os.makedirs(vagabond_dirs)
    except OSError as e:
        if errno.errorcode[e.errno] == 'EEXIST':
            pass
        else:
            raise
    
if __name__ == '__main__' and __package__ is None:
    from os import sys, path
    sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))
    from vagabond.vm import VM, VBoxManageError

    setup_project()

    args = getArgs()
    if args.subparser_name == 'init':
        # Look into how vagrant does this
        # vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
        init(args)
    elif args.subparser_name == 'list':
        if args.ostypes:
            VM.show_valid_os_types()
    elif args.subparser_name == 'up':
        # Read the Vagrant file in the current directory
        vm = VM( options=readVagabond(), args=args )
        vm.up()
    elif args.subparser_name == 'destroy':
        vm = VM( options=readVagabond(), args=args )
        vm.unregistervm()
    elif args.subparser_name == 'package':
        raise Exception("You haven't implemented the package subparser yet") 
       
    elif args.subparser_name == 'halt':
        vm = VM( options=readVagabond(), args=args )
        try:
            print args
            vm.vbox('VBoxManage', 'controlvm', vm.config['vmname'], 'savestate')
        except VBoxManageError as e:
            raise e
            
    elif args.subparser_name == 'box':
        if args.box_subparser_name == 'add':
            VM.addbox(args)
            L.info("Box added:" + args.name)


